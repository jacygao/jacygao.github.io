<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jacy Gao</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on Jacy Gao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 Aug 2021 23:58:26 +1000</lastBuildDate><atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use cases for Event Sourcing</title>
      <link>http://localhost:1313/post/event-sourcing-2/</link>
      <pubDate>Mon, 30 Aug 2021 23:58:26 +1000</pubDate>
      
      <guid>http://localhost:1313/post/event-sourcing-2/</guid>
      <description>This is the 2nd blog of the series on Event Sourcing. If you are not familiar with the concept, make sure to check out Demystifying Event Sourcing.
Status In Progress
Event Sourcing in real life The concept of Event Sourcing was inspired by real world examples. The primary example - the double entry accounting ledger is considered one of the earliest implementations of Event Sourcing in real life.
Why is it a great use case of Event Sourcing?</description>
    </item>
    
    <item>
      <title>Demystifying Event Sourcing</title>
      <link>http://localhost:1313/post/event-sourcing/</link>
      <pubDate>Sun, 29 Aug 2021 23:20:45 +1000</pubDate>
      
      <guid>http://localhost:1313/post/event-sourcing/</guid>
      <description>The inspiration behind this blog is from numerous great conversations while working with ThoughtWorks on a Greenfield International Finance Platform. As I started to gather relevant information from all over the place, I decided to write this blog to organise and share my thoughts.
Definition I&amp;rsquo;ll start by looking at the definitions.
Martin Fowler and Greg Young have both written great definitions of Event Sourcing:
Martin Fowler, 2005:
 &amp;ldquo;Event Sourcing ensures that all changes to application state are stored as a sequence of events.</description>
    </item>
    
  </channel>
</rss>
